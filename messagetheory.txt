CRUD operation:
===============
c=insert record into datatbse
r=read data from datatbse
u=update data in datatbse
d=delete data from database

Form:              views.py           models.py
name:itvedant--->data is extracted--->insert database
rno:20            from form            table

virtual env
env\Scripts\activate
pip install django
django-admin startproject message
cd message
python manage.py startapp messageapp
settings.py :INSTALLED_APP=[
    'messageapp,
]

create.html:
==========
name:------------
email id:-------------
mobile no:-------------
message:---------------
submit

CSRF:
=======
csrf token in the form prevent cross site forgery attack.
Form data must be send along with token
genrerted automatically.

CSRF mechanism:
=================
1]{% csrf_token %} is added in the form ,a csrf token is 
 genrated and at the same time same csrf token is stored
 in the systme by django(cookies).

 2]when form is submitted with data ,this csrf token is also submitted

 3]Before form form data is being inserted into database,that
 form dat need to pass through csrf middlware

 Role of csrf middlware:
 ==========
 CSRF token recieved from==csrf token stored in the cookies
 form                     by django
 If the above condition is true then only middleware
 allow you to move further to views.py function.Otherwise
 your post request is aborted or forbidden

 Types of request:
 ============
 If the request is GET then request.method value is 'GET'
 If the request is POST then request.method value is 'POST'

 If the method is GET then display empty form
 If the method is POST then insert data from the form into
 database

 Insert record into database:
 =======================
 step 1:create databse in the data base management systaem
    create databse databse;

    create database message5to9;

step 2:databse setting in settings.py file
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'message5to9',
        'HOST':'localhost',
        'USER':'root',
        'PASSWORD':'',
        'PORT':'3306'
    }
}

pip install mysqlclient


step 3:creating table that is defining models
Model is a reprsenattion of table in db.
table:msg
id   name       email      mobile msg
---------------------------------------
1   user1  user1@gmail.com  89898989  testing
 create table msg(id int primary key auto_incremnt,
                    name varchar(50),
                    email varchar(50),
                    mobile varchar(10),
                    msg varchar(100)
                )
Model=table
Model is a class defined in models.py in application
folder.
class msg(models.Model):
Any model class defined must be inherited from Model class
which is inside models module

step 4:python manage.py makemigrations
       python manage.py migrate

CRUD:
======
insert record into db table

sql query to insert record:
===============
insert into messageapp_msg(name,email,mobile,msg)
values(n,e,m,msg)

ORM(object relational mapping):
===========
ORM queries->to insert
syntax:
    Modelname.objects.create(col1=value1,col2=value2..)

    m=Msg.objects.create(name=n,email=e,mobile=m,msg=msg)
    m.save()

row ina table is called as object in model.

View records(retrieving)
=======
fetch records from table
sql query :select *from messageapp_msg;
ORM query:Modelname.objects.all()
  eg:Msg.objects.all()

  redirect:
  ========

delete:
========
sql query
delete from tablename where id=value;
where id=value this where clause search record in the 
database table and delete from tablname 
delet that searched record.

step 1:fetch object or row to be deleted
   m=Modelname.onjects.filter(id=rid)

step 2:delete taht objects
  m.delete()

edit:
====
1]show old data to user
2]update new data to database
step 1:fetch data from the databse based on edit id
   m=Msg.objects.filter(id=rid)
step 2:record fetched for editing must be shown to the
    user by sending that fetched record to html or
    browser or template.